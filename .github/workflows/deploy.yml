name: Deploy

on:
  push:
    branches:
      - main

jobs:
  check-for-changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      frontChanged: ${{ steps.front-changes.outputs.any_changed }}
      backChanged: ${{ steps.back-changes.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check for changes in frontend
        id: front-changes
        uses: tj-actions/changed-files@v35
        with:
          files: packages/front/**

      - name: Check for changes in backend
        id: back-changes
        uses: tj-actions/changed-files@v35
        with:
          files: packages/back/**

  front-check:
    needs: [check-for-changes]
    if: needs.check-for-changes.outputs.frontChanged == 'true'
    uses: ./.github/workflows/front-verify.yml

  front-build:
    needs: [front-check]
    uses: ./.github/workflows/front-build.yml

  back-check:
    needs: [check-for-changes]
    if: needs.check-for-changes.outputs.backChanged == 'true'
    uses: ./.github/workflows/back-verify.yml

  back-build:
    needs: [back-check]
    uses: ./.github/workflows/back-build.yml

  back-deploy:
    needs: [back-build, front-build]
    if: needs.back-build.result == 'success' && (needs.front-build.result == 'success' || needs.front-build.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "DEPLOY!"

  front-deploy:
    needs: [back-deploy, front-build]
    if: needs.front-build.result == 'success' && (needs.back-deploy.result == 'success' || needs.back-deploy.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "DEPLOY!"

  debug:
    needs: [front-build, back-build, back-deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "front-build: ${{ needs.front-build.result }}"
          echo "back-build: ${{ needs.back-build.result }}"
          echo "back-deploy: ${{ needs.back-deploy.result }}"
